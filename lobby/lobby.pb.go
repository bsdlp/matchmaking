// Code generated by protoc-gen-go.
// source: lobby.proto
// DO NOT EDIT!

/*
Package lobby is a generated protocol buffer package.

It is generated from these files:
	lobby.proto

It has these top-level messages:
	User
	Hello
	Joined
	Goodbye
	Left
	Sup
	Status
*/
package lobby

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type User struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Maxping uint32 `protobuf:"varint,3,opt,name=maxping" json:"maxping,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}

type Hello struct {
	Lobby string `protobuf:"bytes,1,opt,name=lobby" json:"lobby,omitempty"`
	User  *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *Hello) Reset()         { *m = Hello{} }
func (m *Hello) String() string { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()    {}

func (m *Hello) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type Joined struct {
	Lobby string  `protobuf:"bytes,1,opt,name=lobby" json:"lobby,omitempty"`
	User  []*User `protobuf:"bytes,2,rep,name=user" json:"user,omitempty"`
}

func (m *Joined) Reset()         { *m = Joined{} }
func (m *Joined) String() string { return proto.CompactTextString(m) }
func (*Joined) ProtoMessage()    {}

func (m *Joined) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

type Goodbye struct {
	Lobby string `protobuf:"bytes,1,opt,name=lobby" json:"lobby,omitempty"`
	User  *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *Goodbye) Reset()         { *m = Goodbye{} }
func (m *Goodbye) String() string { return proto.CompactTextString(m) }
func (*Goodbye) ProtoMessage()    {}

func (m *Goodbye) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type Left struct {
	Lobby string `protobuf:"bytes,1,opt,name=lobby" json:"lobby,omitempty"`
	Left  bool   `protobuf:"varint,2,opt,name=left" json:"left,omitempty"`
}

func (m *Left) Reset()         { *m = Left{} }
func (m *Left) String() string { return proto.CompactTextString(m) }
func (*Left) ProtoMessage()    {}

type Sup struct {
	Lobby     string `protobuf:"bytes,1,opt,name=lobby" json:"lobby,omitempty"`
	User      *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Timestamp uint32 `protobuf:"fixed32,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Sup) Reset()         { *m = Sup{} }
func (m *Sup) String() string { return proto.CompactTextString(m) }
func (*Sup) ProtoMessage()    {}

func (m *Sup) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type Status struct {
	Lobby     string  `protobuf:"bytes,1,opt,name=lobby" json:"lobby,omitempty"`
	User      []*User `protobuf:"bytes,2,rep,name=user" json:"user,omitempty"`
	Timestamp uint32  `protobuf:"fixed32,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}

func (m *Status) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

// Client API for MatchMaking service

type MatchMakingClient interface {
	Join(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Joined, error)
	Leave(ctx context.Context, in *Goodbye, opts ...grpc.CallOption) (*Left, error)
	Check(ctx context.Context, in *Sup, opts ...grpc.CallOption) (*Status, error)
}

type matchMakingClient struct {
	cc *grpc.ClientConn
}

func NewMatchMakingClient(cc *grpc.ClientConn) MatchMakingClient {
	return &matchMakingClient{cc}
}

func (c *matchMakingClient) Join(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Joined, error) {
	out := new(Joined)
	err := grpc.Invoke(ctx, "/lobby.MatchMaking/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchMakingClient) Leave(ctx context.Context, in *Goodbye, opts ...grpc.CallOption) (*Left, error) {
	out := new(Left)
	err := grpc.Invoke(ctx, "/lobby.MatchMaking/Leave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchMakingClient) Check(ctx context.Context, in *Sup, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/lobby.MatchMaking/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MatchMaking service

type MatchMakingServer interface {
	Join(context.Context, *Hello) (*Joined, error)
	Leave(context.Context, *Goodbye) (*Left, error)
	Check(context.Context, *Sup) (*Status, error)
}

func RegisterMatchMakingServer(s *grpc.Server, srv MatchMakingServer) {
	s.RegisterService(&_MatchMaking_serviceDesc, srv)
}

func _MatchMaking_Join_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Hello)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MatchMakingServer).Join(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MatchMaking_Leave_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Goodbye)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MatchMakingServer).Leave(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MatchMaking_Check_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Sup)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MatchMakingServer).Check(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _MatchMaking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lobby.MatchMaking",
	HandlerType: (*MatchMakingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _MatchMaking_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _MatchMaking_Leave_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _MatchMaking_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
